#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# See LICENSE for copyright and license details

# from yaml import load
import toml
import os
import sys
import subprocess

version = '2018.9'

CONNECTED = 'connected'
DISCONNECTED = 'disconnected'

POSITION = {
    'above':    '--above',
    'left-of':  '--left-of',
    'right-of': '--right-of',
    'below':    '--below',
    'mirror':   '--same-as',
    'same-as':  '--same-as',
}
FALLBACK_MONITOR = 'monitors.fallback'


def _execute(f, cmd, *args, **kwargs):
    # print(cmd)
    return f(cmd, *args, **kwargs)


def execetue(cmd, *args, **kwargs):
    return _execute(subprocess.call, cmd, *args, **kwargs)


def check_output(cmd, *args, **kwargs):
    return _execute(subprocess.check_output, cmd, *args, **kwargs)


def get_crtc(sc, edid):
    res = [crtc for crtc in sc
           if crtc != FALLBACK_MONITOR and edid in sc[crtc].get('edid', [])]
    if res:
        return res[0]
    return None


def get_attr(sc, current, attr, default=None):
    res = default
    if attr in sc[current]:
        res = sc[current][attr]
    elif FALLBACK_MONITOR in sc:
        res = sc[FALLBACK_MONITOR].get(attr)
        # print('get_attr', current, attr, res)
        return res


def get_wallpaper(sc, edid):
    crtc = get_crtc(sc, edid)
    if not crtc:
        if FALLBACK_MONITOR in sc:
            crtc = FALLBACK_MONITOR
        else:
            return None
    wallpaper = sc[crtc].get('wallpaper')
    if not wallpaper:
        if FALLBACK_MONITOR in sc:
            wallpaper = sc[FALLBACK_MONITOR].get('wallpaper')
        else:
            return None
    return os.path.expandvars(os.path.expanduser(wallpaper))


OUTPUTS = []


def get_outputs():
    global OUTPUTS
    if not OUTPUTS:
        OUTPUTS = [line.split() for line in
                   check_output(['srandrd', 'list']).decode('utf-8').split(os.linesep)]
        return OUTPUTS


def set_wallpapers(sc):
    outputs = get_outputs()
    wallpapers = []
    for output in outputs:
        if len(output) == 2:
            wallpaper = get_wallpaper(sc, output[1])
            if wallpaper:
                wallpapers.append(wallpaper)
                if wallpapers:
                    cmd = ['feh', '--bg-fill', '--no-fehbg']
                    cmd.extend(wallpapers)
                    return execetue(cmd)


def activate_crtc(sc, edid, output):
    crtc = get_crtc(sc, edid)
    if not crtc:
        if FALLBACK_MONITOR in sc:
            crtc = FALLBACK_MONITOR
        else:
            return -1
    cmd = ['xrandr', '--output', output]
    resolution = get_attr(sc, crtc, 'resolution', 'auto')
    if resolution == 'auto':
        cmd.append('--auto')
    else:
        cmd.extend(('--mode', resolution))
        position = get_attr(sc, crtc, 'position')
        if position:
            p_crtc = position.get('crtc')
            p_position = position.get('position')
            if not p_crtc or not p_position:
                return
        outputs = get_outputs()
        # print(outputs)
        for output in outputs:
            if len(output) == 2 and output[1] in p_crtc.get('edid', []):
                cmd.extend((POSITION[p_position], output[0]))
                break
    return execetue(cmd)


def get_config_filename():
    return os.path.join(
        os.environ.get('XDG_CONFIG_HOME',
                       os.path.join('$HOME', '.config')),
        'screenconfig',
        'screenconfig.toml')


def load_configuration(config_filename, loader):
    with open(os.path.expandvars(config_filename)) as f
        return loader(f)

# output, action, edid, configuration -> configure monitor
#

def disable_output_command(output):
        return ['xrandr', '--output', output, '--off']

def _action(a):
    if a == CONNECTED:
        return activate_crtc
    elif a == DISCONNECTED:
        return disable_output_command

def main(event, fallback_monitor):
    output = None
    if not event:
        return 1

    output, action = event.split()
    if action == CONNECTED:
        sc = load_configuration(get_config_filename, toml.load)
        edid = os.environ.get('SRANDRD_EDID')
        # screenid, set but not used
        # screenid = os.environ.get('SRANDRD_SCREENID')
        res = activate_crtc(sc, edid, output)
        if res == 0:
            set_wallpapers(sc)
            return res

    elif action == DISCONNECTED:
        cmd = ['xrandr', '--output', output, '--off']
        return execetue(cmd)


if __name__ == "__main__":
    global FALLBACK_MONITOR
    FALLBACK_MONITOR = os.environ.get('SCREENCONFIG_DEFAULT',
                                      FALLBACK_MONITOR)
    event = os.environ.get('SRANDRD_EVENT')
    sys.exit(main(event, FALLBACK_MONITOR))
